{"version":3,"sources":["Topics.js","App.js","serviceWorker.js","index.js"],"names":["Topics","anchor","excerpt","react_default","a","createElement","chips","transcriptionComponents","classes","Typography","className","timeMarker","descriptionComponent","title","videoLink","role","aria-label","Link","href","target","configureAnchors","scrollDuration","useStyles","makeStyles","theme","root","flexGrow","heading","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","expansionPanel","textAlign","color","palette","primary","contrastText","backgroundColor","main","secondary","toolbar","mixins","goToTop","position","zIndex","bottom","spacing","right","padding","display","justifyContent","flexWrap","chip","margin","topLink","textDecoration","app","contents","concat","background","grey","navigationGrid","borderRadius","topic","marginTop","intro","filterLabel","marginBottom","contentTitle","globalFilter","honorableMentions","paddingTop","paddingBottom","App","_useState","useState","_useState2","Object","slicedToArray","activeChips","setActiveChips","_useState3","_useState4","drawerOpen","setDrawerOpen","toggleDrawer","allChips","keys","flatMap","reduce","accum","filteredTopics","filter","length","indexOf","navigationTopics","toConsumableArray","AppBar","lib_default","id","Toolbar","IconButton","edge","menuButton","onClick","Menu_default","variant","Drawer","open","onClose","List","map","ListItem","Fab","goToAnchor","ArrowUpward_default","Grid","container","key","item","xs","underline","Button","Chip","icon","FilterList_default","label","onDelete","activeChip","clickable","src","width","height","frameBorder","allow","allowFullScreen","ExpansionPanel","ExpansionPanelSummary","expandIcon","ExpandMore_default","aria-controls","ExpansionPanelDetails","style","transcriptionTimeMarker","align","documentation","Boolean","window","location","hostname","match","createMuiTheme","red","ReactDOM","render","ThemeProvider","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.efa14172.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Link from \"@material-ui/core/Link\";\n\nexport type Topic = {\n  anchor: string,\n  excerpt: string,\n  videoLink: string,\n  chips: string[],\n  title: string,\n  descriptionComponent: Component,\n  transcriptionComponents: Component[],\n};\n\nconst Topics: Topic[] = [\n  {\n    \"anchor\": \"ContextSelection\",\n    \"excerpt\": (<span>\n    Who needs a mouse to select code when you have a awesome IDE?\n  </span>),\n    \"chips\": [\n      \"Extend Selection\",\n      \"Shrink Selection\",\n    ],\n    \"transcriptionComponents\": (classes) => [\n      (<Typography>\n        <span className={classes.timeMarker}>0:00</span> - Starts off at the parameter and use the <code>Extend\n        Selection</code> action to extend the\n        selection to the method signature's type, then to the entire method parameter, after that the\n        entire function body is selected, then the variable declaration is selected, and finally the\n        entire statement is selected.\n      </Typography>),\n      (<Typography>\n        <span className={classes.timeMarker}>0:03</span> - The <code>Shrink Selection</code> action is\n        used to work backwards from the selection\n        extension.\n      </Typography>),\n      (<Typography>\n        <span className={classes.timeMarker}>0:04</span> - The rest is just to show you how the <code>Extend\n        Selection</code> and <code>Shrink\n        Selection</code> semantically work based off of differing context origins.\n      </Typography>),\n    ],\n    \"descriptionComponent\": (<Typography>\n      Officially the action is called <code>Extend Selection</code>.\n      Which makes sense, because what it does is it extends the selection to the next semantic level in\n      your code.\n      It also has an inverse function action which is called (to no surprise) <code>Shrink\n      Selection</code>.\n      Did those words not make sense? No worries, just take a peek at the video above!\n    </Typography>),\n    \"title\": \"Context Aware Selection\",\n    \"videoLink\": \"344388809\"\n  },\n  {\n    \"anchor\": \"MultiSelect\",\n    \"excerpt\": (<span>\n    Even though we try to do our best to not repeat ourselves.\n    However in some instances we have and we need to change code that was repeated.\n    Fear not my fellow hacker, your IDE has the power!\n  </span>),\n    \"chips\": [\n      'Quick Refactor',\n      'Multi-Cursor',\n      'Select Next Occurrence',\n      'Unselect Occurrence',\n    ],\n    \"transcriptionComponents\": (classes) => [\n      (<Typography><span className={classes.timeMarker}>0:00</span> - Both parameters of the methods in\n        scope could be renamed to something more descriptive.</Typography>),\n      (<Typography><span className={classes.timeMarker}>0:09</span> - Just for smiles, grins, and a bit\n        of practice let's rename <code>dispatch</code> to the more salsa flavored variant\n        of <code>dispatchito</code>.</Typography>),\n      (<Typography><span className={classes.timeMarker}>0:11</span> - We are told that that is the\n        last <code>dispatch</code> after our first dispatch selection, however choosing the <code>Select\n          Next Occurrence</code> action it wil search again from the top.</Typography>),\n      (<Typography><span className={classes.timeMarker}>0:13</span> - Oh! We don't want to change that\n        dispatch, using the <code>Unselect Occurrence</code> action we are able to undo the last thing we\n        have selected.</Typography>),\n      (<Typography><span className={classes.timeMarker}>0:15</span> - It looks\n        like <code>state</code> is not used, we can clean that up really quick!</Typography>),\n    ],\n    \"descriptionComponent\": (<Typography>\n      While the regular refactoring action is handy, it has its limitations.\n      One of those is that it cannot jump scopes. However, with a bit of cleverness and the\n      <code>Select Next Occurrence</code> action, you can change a bunch of lines with ease!\n    </Typography>),\n    \"title\": \"Multi-Cursor Refactoring\",\n    \"videoLink\": \"344388781\"\n  },\n  {\n    \"anchor\": \"RegexReplace\",\n    \"excerpt\": (<span>\n    Have you ever had some code scattered across the code base that needs to be changed?\n    Guess what, there is as easy button! However it requires you to write RegEx <span role={'img'}\n                                                                                      aria-label={'scared'}>😱</span>\n  </span>),\n    \"chips\": [\n      'Regex',\n      'Find/Replace',\n      'Quick Refactor',\n    ],\n    \"transcriptionComponents\": (classes) => [\n      (<Typography><span className={classes.timeMarker}>0:00</span> - Observe that both token headers\n        are different!</Typography>),\n      (<Typography><span className={classes.timeMarker}>0:08</span> - Use\n        the <code>Replace</code> action with the <code>cool_token</code> lexical token selected, and enter\n        in the <code>Capture Group</code>, which will match just the token variable.</Typography>),\n      (<Typography><span className={classes.timeMarker}>0:20</span> - Start to enter the replacement\n        (observe the grey popup below the first match to see what the replacement string will look like!)\n        making sure to escape any $ as they represent the capture group.</Typography>),\n      (<Typography><span className={classes.timeMarker}>0:25</span> - Enter the first <code>Capture\n          Group</code> in the replacement and observe the replacement string in the editor!</Typography>\n      ),\n      (<Typography><span className={classes.timeMarker}>0:30</span> - <code>Replace</code> each string\n        that matches our regular expression and enjoy the quick refactor!</Typography>),\n    ],\n    \"descriptionComponent\": (<Typography>\n      We all copy paste every now and then, some of us do it more than others.\n      Which is all fun and games until you have to change those chunks of code!\n      Our authorization is being upgraded to <code>Basic</code> authentication so we need to prefix our\n      tokens with the word <code>Basic</code>.\n      However, that code is peppered throughout the codebase!\n      Here is a link that give you more descriptions on <Link\n      href={'https://www.jetbrains.com/help/idea/tutorial-finding-and-replacing-text-using-regular-expressions.html#capture_groups_and_backreference'}\n      target={'_blank'}>this feature.</Link>\n    </Typography>),\n    \"title\": \"Regular Expression Lookup Replacement\",\n    \"videoLink\": \"344388768\"\n  },\n  {\n    \"anchor\": \"MethodsOnTheFly\",\n    \"excerpt\": (<span>\n    Are you tired of having to make methods on your own?\n    Well with Error Driven Development, you can make your IDE do the code writing for you!\n  </span>),\n    \"chips\": [\n      'Live Template',\n      'Next Highlighted Error',\n      'Show Context Actions',\n      'Convert to Expression Body',\n      'Create Function',\n      'Run',\n    ],\n    \"transcriptionComponents\": (classes) => [\n      (<Typography><span className={classes.timeMarker}>0:00</span> - We need specify the type of our\n        local variable, so that our IDE can create a method whose signature is a string return\n        type.</Typography>),\n      (<Typography><span className={classes.timeMarker}>0:10</span> - Taking advantage of\n        the <strong>sout</strong> <code>Live Template</code> which set us us perfectly to direct things to\n        standard output.</Typography>),\n      (<Typography><span className={classes.timeMarker}>0:14</span> - The <code>Next Highlighted\n        Error</code> action will take us to the, well, next highlighted error. Where we can activate\n        the <code>Show Context Actions</code> (option+enter) and choose the <strong>Create\n          Function</strong> option.</Typography>),\n      (<Typography><span className={classes.timeMarker}>0:17</span> - We accept the method signature\n        given and begin to fill out our return literal.</Typography>),\n      (<Typography><span className={classes.timeMarker}>0:27</span> - Before we run our new method we\n        will activate the <code>Show Context Actions</code> (option+enter) and choose the <strong>Convert to expression\n          body</strong> option to clean up our code a bit.</Typography>),\n      (<Typography><span className={classes.timeMarker}>0:27</span> - Navigating to the main method, we\n        will activate the <code>Show Context Actions</code> (option+enter) and choose the <strong>Run</strong> option to\n        give our user the message!</Typography>),\n    ],\n    \"descriptionComponent\": (<Typography>\n      The goal here is to get a message to the user as fast as possible, with minimal amounts of\n      cumbersome typing!\n    </Typography>),\n    \"title\": \"Methods on demand\",\n    \"videoLink\": \"344388849\"\n  },\n  {\n    \"anchor\": \"Extractions\",\n    \"excerpt\": (<span>\n    There are times when things should be accessed from an object reference rather than being put inline.\n    I bet you guessed that your IDE can do something about that!\n  </span>),\n    \"chips\": [\n      'Refactor',\n      'Extract Variable',\n      'Inline Variable',\n    ],\n    \"transcriptionComponents\": (classes) => [\n      (<Typography><span className={classes.timeMarker}>0:00</span> - Using the <code>Extract\n        Variable</code> action enables the IDE to create a local varible that is correctly typed to the\n        object that it references.</Typography>),\n      (<Typography><span className={classes.timeMarker}>0:08</span> - If you ever change your mind\n        about the variable, you will always have the option to use the <code>Inline Variable</code> which\n        will pepper the object code to all of the places that it was referenced. Which is what the default\n        option does.</Typography>),\n    ],\n    \"descriptionComponent\": (<Typography>\n      There are times when things should be accessed from an object reference rather than being put inline.\n      I bet you guessed that your IDE can do something about that!\n    </Typography>),\n    \"title\": \"Local Variable Extraction\",\n    \"videoLink\": \"344388823\"\n  },\n  {\n    \"anchor\": \"FastJavaToKotlin\",\n    \"excerpt\": (<span>\n    Go from Java to Kotlin in no time flat!!\n  </span>),\n    \"chips\": [\n      'Find Action',\n      'New',\n      'Show Context Actions',\n      'Local Variable Extraction',\n      'Extend Selection',\n      'Run',\n      'Convert Java to Kotlin',\n      'Live Template',\n    ],\n    \"transcriptionComponents\": (classes) => [\n      (<Typography><span className={classes.timeMarker}>0:00</span> - Starting from scratch, let's\n        create a new Java file using the <code>Find Action</code> step to access\n        the <code>New</code> action.</Typography>),\n      (<Typography><span className={classes.timeMarker}>0:01</span> - With the <code>New</code> window\n        open, to narrow down the selection just start typing! Usually if a window pops up, typing just\n        works (no need to click anywhere).</Typography>),\n      (<Typography><span className={classes.timeMarker}>0:09</span> - Using the <strong>psvm</strong>\n        <code>Live Template</code> allows you to create the <code>public static void</code> boiler plate\n        faster!</Typography>),\n      (<Typography><span className={classes.timeMarker}>0:09</span> - To get some words to our user we\n          use the <strong>sout</strong>\n          <code>Live Template</code> which sets you up nicely to direct to standard output.</Typography>\n      ),\n      (<Typography><span className={classes.timeMarker}>0:15</span> - Navigating to the main method, we\n        will activate the <code>Show Context Actions</code> (option+enter) and choose the <strong>Run</strong> option to\n        give our user the message!</Typography>),\n      (<Typography><span className={classes.timeMarker}>0:20</span> - Now we can take advantage of\n        the <code>Convert Java to Kotlin</code> action, which will convert the code and file into Kotlin.\n        It will also set your project up with Kotlin if this is your first time :)</Typography>),\n      (<Typography><span className={classes.timeMarker}>0:31</span> - After changing some of the\n        output, navigating to the main method, we will activate the <code>Show Context Actions</code> (option+enter) and\n        choose the <strong>Run</strong> option to give our user the message!</Typography>),\n    ],\n    \"descriptionComponent\": (<Typography>\n      Go from Java to Kotlin in no time flat!!\n    </Typography>),\n    \"title\": \"Java to Kotlin Conversion Saga\",\n    \"videoLink\": \"344388870\"\n  },\n  {\n    \"anchor\": \"JestTest\",\n    \"excerpt\": (<span>\n    Combine a bunch of neat tricks to enhance your front-end unit test creation experience!\n  </span>),\n    \"chips\": [\n      'Unit Test',\n      'Jest',\n      'Find Action',\n      'New',\n      'Show Context Actions',\n      'Local Variable Extraction',\n      'Extend Selection',\n      'Refactor',\n      'Paste History',\n      'Run'\n    ],\n    \"transcriptionComponents\": (classes) => [\n      (<Typography><span className={classes.timeMarker}>0:00</span> - Starting from scratch, let's\n        create a new Javascript file using the <code>Find Action</code> step to access\n        the <code>New</code> action.</Typography>),\n      (<Typography><span className={classes.timeMarker}>0:01</span> - With the <code>New</code> window\n        open, to narrow down the selection just start typing! Usually if a window pops up, typing just\n        works (no need to click anywhere).</Typography>),\n      (<Typography><span className={classes.timeMarker}>0:12</span> - Now that we have a blank\n        Javascript file, we need to first create our <code>describe</code> block which can be done quickly\n        by using the <strong>descr</strong> live template.</Typography>),\n      (<Typography><span className={classes.timeMarker}>0:20</span> - Something needs to go in the describe\n        block, we need an <code>it</code> block which can be done quickly by using\n        the <strong>it</strong> live template. The use of <code>Paste History</code> is just a shortcut to using a\n        pre-written test title.</Typography>),\n      (<Typography><span className={classes.timeMarker}>0:33</span> - Invoking the <code>Show Context\n        Actions</code> (option+enter) pulls up a context window of all of the things we want. So let's\n        create a local variable that references our test output.</Typography>),\n      (<Typography><span className={classes.timeMarker}>0:51</span> - Strategic usage of the <code>Extend Selection\n      </code> selects the entire test so that we may use the <code>Duplicate</code> action.</Typography>),\n      (<Typography><span className={classes.timeMarker}>1:27</span> - Navigate up to the test method\n        and invoke <code>Show Context Actions</code> (option+enter) to pull up a context window with\n        the <strong>Run Test</strong> option.</Typography>),\n      (<Typography><span className={classes.timeMarker}>1:36</span> - Sneakly use the actual results of the test output\n        as the expected test result ;D </Typography>),\n      (<Typography><span className={classes.timeMarker}>1:41</span> - Strategic usage of the <code>Extend Selection\n      </code> selects the entire expected result so that we may use the correct actual result.</Typography>),\n      (<Typography><span className={classes.timeMarker}>1:45</span> - Invoke the <code>Run</code> action shortcut as we\n        have already run this test once, so we know that it will run the correct thing.</Typography>),\n    ],\n    \"descriptionComponent\": (<Typography>\n      Combine a bunch of neat tricks to enhance your front-end unit test creation experience!\n    </Typography>),\n    \"title\": \"A cool way to write Jest Unit Tests\",\n    \"videoLink\": \"344387285\"\n  },\n  {\n    \"anchor\": \"ColorPicker\",\n    \"excerpt\": (<span>\n    Have you ever needed a hexadecimal color code to tweak your UI?\n    Well your JetBrains IDE has your back!\n  </span>),\n    \"chips\": [\n      'Show Color Picker',\n      'Quick Refactor'\n    ],\n    \"transcriptionComponents\": (classes) => [\n      (<Typography><span className={classes.timeMarker}>0:00</span> - Selecting the color square, in\n        the gutter, to\n        trigger the <code>Show Color Picker</code> action.</Typography>),\n      (<Typography><span className={classes.timeMarker}>0:07</span> - Choosing the color from the UI\n        caused the value in CSS to change to the respective hexadecimal color!</Typography>),\n      (<Typography><span className={classes.timeMarker}>0:18</span> - Selecting the color square,\n        adjusting the transparency slider, and accepting the changes caused the IDE to change the CSS\n        value from a hexadecimal to the respective RGBA, too cool!</Typography>),\n    ],\n    \"descriptionComponent\": (<Typography>\n      The <code>Show Color Picker</code> action is great whenever you need a color on the fly.\n      Also, your IDE is smart enough to recognize when you have a hexadecimal color, it will put a\n      color square in the gutter, denoting that you can change the color using the color picker ui!\n    </Typography>),\n    \"title\": \"Color Picker UI\",\n    \"videoLink\": \"344388830\"\n  },\n  {\n    \"anchor\": \"ManualMultiSelect\",\n    \"excerpt\": (<span>\n    Sometimes we are stuck doing tedious tasks, however we can speed up our refactoring process with a bit of\n    creativity!\n  </span>),\n    \"chips\": [\n      'Multi-Cursor',\n    ],\n    \"transcriptionComponents\": (classes) => [],\n    \"descriptionComponent\": (<Typography>\n      Repetitive tasks, such as putting these transcripts in a unordered list, can be a bit of a pain.\n      You can read more about this <a\n      href={'https://www.jetbrains.com/help/rider/Multicursor.html#add-delete-clone-caret'}\n      target={'_blank'}>on the JetBrains Documentation</a>.\n    </Typography>),\n    \"title\": \"Manual Multi-Cursor Refactoring\",\n    \"videoLink\": \"344886019\"\n  },\n  {\n    \"anchor\": \"JestLiveTemplating\",\n    \"excerpt\": (<span>\n    Writing tests is awesome, writing tests super quick is amazing!\n    Learn how to crank out tests like a upper management figure.\n  </span>),\n    \"chips\": [\n      'Unit Tests',\n      'Live Template',\n      'Jest',\n      'Paste History'\n    ],\n    \"transcriptionComponents\": (classes) => [\n      (<Typography><span className={classes.timeMarker}>0:00</span> - Starting out with a blank\n        Javascript file, we need to first create our <code>describe</code> block which can be done quickly\n        by using the <strong>descr</strong> live template.</Typography>),\n      (<Typography><span className={classes.timeMarker}>0:06</span> - Now that we have a describe\n        block, we need a <code>it</code> block which can be done quickly by using\n        the <strong>it</strong> live template.</Typography>),\n    ],\n    \"descriptionComponent\": (<Typography>\n      Sometimes it can be tedious to start out from nothing and have to go to something, when it comes to\n      writing tests.\n      <code>Live Templates</code> come in to save the day, all you have to do is just enter the predefined\n      character sequence and BOOM, you have a code block!\n    </Typography>),\n    \"title\": \"Live Templates for Jest\",\n    \"videoLink\": \"344388836\"\n  },\n  {\n    \"anchor\": \"KotlinUnitTest\",\n    \"excerpt\": (<span>\n    Have I mentioned that tests are cool and writing tests quickly and efficiently.\n    Here we will see a combination of a lot of powerful actions that enable quick development!\n  </span>),\n    \"chips\": [\n      'Unit Test',\n      'JUnit',\n      'Find Action',\n      'New',\n      'Show Context Actions',\n      'Local Variable Extraction',\n      'Extend Selection',\n      'Refactor',\n      'Run',\n    ],\n    \"transcriptionComponents\": (classes) => [\n      (<Typography><span className={classes.timeMarker}>0:00</span> - Starting from scratch, let's\n        create a new Kotlin file using the <code>Find Action</code> step to access\n        the <code>New</code> action.</Typography>),\n      (<Typography><span className={classes.timeMarker}>0:01</span> - With the <code>New</code> window\n        open, to narrow down the selection just start typing! Usually if a window pops up, typing just\n        works (no need to click anywhere).</Typography>),\n      (<Typography><span className={classes.timeMarker}>0:20</span> - We need a class and a method to\n        test.</Typography>),\n      (<Typography><span className={classes.timeMarker}>0:29</span> - I decided to use <code>Expand\n        Selection</code> to select the string literal so that I can copy it and paste it\n        later.</Typography>),\n      (<Typography><span className={classes.timeMarker}>0:32</span> - After navigating up to the class\n        definition, invoking the <code>Show Context Actions</code> (option+enter) pulls up a context\n        window of all of the things we want. So let's select create a test.</Typography>),\n      (<Typography><span className={classes.timeMarker}>0:35</span> - I thought that it would have been\n        quicker to mouse click the method that we want to test and submit, it probably was not\n        ._.</Typography>),\n      (<Typography><span className={classes.timeMarker}>0:20</span> - We need a class and a method to\n        test.</Typography>),\n      (<Typography><span className={classes.timeMarker}>0:47</span> - Invoking the <code>Show Context\n        Actions</code> (option+enter) pulls up a context window of all of the things we want. So let's\n        create a local variable that references our test subject.</Typography>),\n      (<Typography><span className={classes.timeMarker}>0:59</span> - Forgot that I was writing Kotlin\n        and removed the unnecessary semi-colon.</Typography>),\n      (<Typography><span className={classes.timeMarker}>1:17</span> - Proceed to forget that my <code>Paste\n        History</code> has the expected test result with quotes, use <code>Extend Selection</code> to\n        correct my mistake.</Typography>),\n      (<Typography><span className={classes.timeMarker}>1:22</span> - Navigate up to the test method\n        and invoke <code>Show Context Actions</code> (option+enter) to pull up a context window with\n        the <strong>Run Test</strong> option.</Typography>),\n      (<Typography><span className={classes.timeMarker}>1:33</span> - Realize that I spelled the method\n          name incorrectly and used <code>Refactor</code> to spell the method name correctly.</Typography>\n      ),\n    ],\n    \"descriptionComponent\": (<Typography>\n      Learn how to crank out a new file and slam in a brand new unit test in a small amount of time.\n    </Typography>),\n    \"title\": \"Unit Testing Saga\",\n    \"videoLink\": \"344388880\"\n  },\n  {\n    \"anchor\": \"RegexValidation\",\n    \"excerpt\": (<span>\n    Regular Expression are scary, however there are some tools that will be most helpful developing your\n    expression!\n  </span>),\n    \"chips\": [\n      'Regex',\n      'Show Context Actions',\n      'Evaluate RegEx',\n    ],\n    \"transcriptionComponents\": (classes) => [\n      (\n        <Typography>\n          <span className={classes.timeMarker}>0:00</span> - Navigating to the regular expression in\n          question, we will activate the <code>Show Context Actions</code> (option+enter), type in regex to narrow down\n          our selection (really using the arrows would have been less keystrokes) and choose the <strong>Evaluate\n          RegEx</strong> option to test our really long regular expression!\n        </Typography>\n      ),\n    ],\n    \"descriptionComponent\": (<Typography>\n      Email validation can be done by regular expression.\n      So let's take a RegEx from the internet and test it out using our IDE!\n    </Typography>),\n    \"title\": \"Regular Expression Evaluation\",\n    \"videoLink\": \"344388891\"\n  },\n  {\n    \"anchor\": \"SimpleRefactor\",\n    \"excerpt\": (<span>\n    Do the typing once and make changes in all the right places!\n  </span>),\n    \"chips\": [\n      'Refactor',\n    ],\n    \"transcriptionComponents\": (classes) => [\n      (<Typography> <span className={classes.timeMarker}>0:00</span> - Using\n        the <code>Refactor</code> action on this method parameter will change the spelling of the\n        reference in all of the places!</Typography>),\n      (<Typography> <span className={classes.timeMarker}>0:06</span> - Using\n        the <code>Refactor</code> action on this method parameter will give a bit more salsa to the\n        spelling of the reference in all of the places!</Typography>),\n    ],\n    \"descriptionComponent\": (<Typography>\n      Refactoring becomes easy with the <code>Refactor</code> action, never worry about having spelling\n      things incorrectly.\n      As you can fix it quick and easy later!\n    </Typography>),\n    \"title\": \"Variable Refactor\",\n    \"videoLink\": \"344388796\"\n  },\n  {\n    \"anchor\": \"LineFinder\",\n    \"excerpt\": (<span>\n    There are times when you have to go to the problem, because it cannot go to you.\n  </span>),\n    \"chips\": [\n      'Jest',\n      'Unit Test',\n      'Line/Column'\n    ],\n    \"transcriptionComponents\": (classes) => [\n      (<Typography><span className={classes.timeMarker}>0:00</span> - When we run the test (let's\n        ignore the fact that the stacktrace has a link that takes you to the file, line, and column) and\n        copy the line and column number (it is in the\n        format <code>line-number:column-number</code>)</Typography>),\n      (<Typography><span className={classes.timeMarker}>0:16</span> - Navigating to the file and using\n        the <code>Line/Column</code> action, we put in our line and column number of the failure. We fix\n        the problem and navigate back to our test to run it!</Typography>),\n    ],\n    \"descriptionComponent\": (<Typography>\n      There are times when you have to go to the problem, because it cannot go to you.\n    </Typography>),\n    \"title\": \"Find a Line/Column\",\n    \"videoLink\": \"344388755\"\n  },\n  {\n    \"anchor\": \"QuickDocumentation\",\n    \"excerpt\": (<span>\n    Knowing is half of the battle, our IDE gives us the insight as to what the method that we are using does\n    (provided there is documentation)\n  </span>),\n    \"chips\": [\n      'Parameter',\n      'Documentation',\n      'Quick Documentation',\n      'Declaration or Usages',\n    ],\n    \"transcriptionComponents\": (classes) => [\n      (<Typography><span className={classes.timeMarker}>0:04</span> - Using\n        the <code>Parameter</code> action, throws up this tooltip that shows you what the parameters are,\n        big surprise!!</Typography>),\n      (<Typography><span className={classes.timeMarker}>0:07</span> - The <code>Quick\n        Documentation</code> action, gives us a nice window that has even more provided information about\n        the method being inspected.</Typography>),\n      (<Typography><span className={classes.timeMarker}>0:04</span> - Using\n        the <code>Parameter</code> action, throws up this tooltip that shows you what the parameters are,\n        big surprise!!</Typography>),\n      (<Typography><span className={classes.timeMarker}>0:16</span> - The <code>Declaration or\n        Usages</code> action will take us to the source of the code in question allowing you to take a\n        peek at it!</Typography>),\n    ],\n    \"descriptionComponent\": (<Typography>\n      Now that we know how to create tests really quick, one extra challenge is having to remember what\n      the method you are testing accepts and returns!\n    </Typography>),\n    \"title\": \"Quick Parameter Documentation\",\n    \"videoLink\": \"344388861\"\n  },\n  {\n    \"anchor\": \"WriteDocumentation\",\n    \"excerpt\": (<span>\n    Do you comment your code? Well sometimes self documenting code is not enough to give us a quick summary of\n    what you function is supposed to do.\n  </span>),\n    \"chips\": [\n      'Documentation',\n    ],\n    \"transcriptionComponents\": (classes) => [\n      (\n        <Typography>\n          <span className={classes.timeMarker}>0:00</span> - Starting at the beginning of a method and\n          starting the comment with <code>{'\\u2215'}**</code> and going to a new line will cause your IDE\n          to automatically create documentation about your method!\n        </Typography>\n      ),\n    ],\n    \"descriptionComponent\": (<Typography>\n      When your method name is not descriptive enough, don't worry too much, just let your IDE do most of\n      the writing for you!\n    </Typography>),\n    \"title\": \"API Documentation Generation\",\n    \"videoLink\": \"344388901\"\n  },\n  ];\n\nexport default Topics;","import React, {useState} from 'react';\nimport './App.css';\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {createMuiTheme, makeStyles} from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport ScrollableAnchor, {configureAnchors, goToAnchor} from 'react-scrollable-anchor'\nimport Fab from \"@material-ui/core/Fab\";\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport Chip from \"@material-ui/core/Chip\";\nimport Topics from \"./Topics\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Link from \"@material-ui/core/Link\";\nimport {Grid} from \"@material-ui/core\";\nimport {blue, blueGrey,  green, grey} from \"@material-ui/core/colors\";\nimport Button from \"@material-ui/core/Button\";\n\nconfigureAnchors({scrollDuration: 200});\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    fontWeight: theme.typography.fontWeightRegular,\n  },\n  expansionPanel: {\n    textAlign: 'left',\n    color: theme.palette.primary.contrastText,\n    backgroundColor: theme.palette.primary.main,\n  },\n  timeMarker: {\n    fontWeight: 500,\n    color: theme.palette.secondary.main,\n  },\n  toolbar: theme.mixins.toolbar,\n  goToTop: {\n    position: 'fixed',\n    zIndex: 9001,\n    bottom: theme.spacing(2),\n    right: theme.spacing(2),\n  },\n  excerpt: {\n    padding: theme.spacing(2)\n  },\n  chips: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexWrap: 'wrap',\n  },\n  chip: {\n    margin: theme.spacing(1),\n  },\n  topLink: {\n    padding: theme.spacing(2),\n    textDecoration: 'none',\n  },\n  app: {\n    textAlign: 'center'\n  },\n  contents: {\n    padding: `0 ${theme.spacing(5)}px`,\n    background: '#303433',\n    color: grey[100],\n  },\n  navigationGrid: {\n    borderRadius: theme.spacing(1),\n  },\n  topic: {\n    backgroundColor: 'rgba(124,151,133,0.18)',\n    marginTop: theme.spacing(2),\n    borderRadius: theme.spacing(1),\n  },\n  intro: {\n    padding: `${theme.spacing(2)}px 0`\n  },\n  filterLabel: {\n    marginBottom: theme.spacing(2)\n  },\n  contentTitle: {\n    padding: theme.spacing(2),\n  },\n  globalFilter: {\n    backgroundColor: 'rgba(124,151,133,0.18)',\n    padding: theme.spacing(2),\n    margin: theme.spacing(2),\n  },\n  honorableMentions: {\n    marginTop: theme.spacing(4),\n    paddingTop: theme.spacing(1),\n    paddingBottom: theme.spacing(2),\n    backgroundColor: 'rgba(151,151,151,0.18)',\n  }\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [activeChips, setActiveChips] = useState([]);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const toggleDrawer = () => setDrawerOpen(!drawerOpen);\n  const allChips = Object.keys(Topics.flatMap(topic => topic.chips).reduce((accum, chip) => {\n    accum[chip] = chip;\n    return accum\n  }, {}));\n  const filteredTopics = Topics.filter(topic => !activeChips.length || !!topic.chips.filter(chip => activeChips.indexOf(chip) > -1).length);\n  const navigationTopics: Topic[] = [\n    ...filteredTopics,\n    ...[\n      {\n        anchor: 'Links',\n        title: '👉Useful Links👈'\n      }\n    ],\n  ];\n  return (\n      <div className={classes.app}>\n        <AppBar color={'primary'} position={\"sticky\"}>\n          <ScrollableAnchor id={'top'}>\n            <div/>\n          </ScrollableAnchor>\n          <Toolbar>\n            <IconButton edge=\"start\" className={classes.menuButton} onClick={toggleDrawer} color=\"inherit\"\n                        aria-label=\"Menu\">\n              <MenuIcon/>\n            </IconButton>\n            <Typography variant=\"h6\" color=\"inherit\">\n              JetBrains IDEs Tips & Tricks\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <Drawer open={drawerOpen} onClose={toggleDrawer}>\n          <Typography className={classes.contentTitle} variant={'h6'}>\n            Available Topics\n          </Typography>\n          <List>\n            {navigationTopics.map(topic => (\n              <ListItem><Link color={''} onClick={toggleDrawer} href={`#${topic.anchor}`}>{topic.title}</Link></ListItem>))}\n          </List>\n        </Drawer>\n        <Fab className={classes.goToTop} onClick={() => goToAnchor('top')}>\n          <ArrowUpwardIcon/>\n        </Fab>\n        <div className={classes.contents}>\n          <div>\n            <Typography className={classes.intro}>\n              Do you need a bit more spice in your development life? Are you interested in squeezing out extra\n              performance\n              from your IDE?\n              Well you have come to the right place my friend! Right below is a list of topics that are covered in the\n              information oasis!\n            </Typography>\n            <Typography>\n              The topics are sorted in order of <strong>coolness <span role={'img'}\n                                                                       aria-label={'cool'}>😎</span></strong>.\n            </Typography>\n            <div className={classes.globalFilter}>\n              <Typography className={classes.filterLabel}>\n                Available Topics\n              </Typography>\n              <Grid className={classes.navigationGrid} container spacing={3}>\n                {navigationTopics.map(topic =>\n                  (<Grid key={`${topic.title}-labels`} item xs>\n                    <Link\n                      underline={'none'}\n                      color={'primary'}\n                      href={`#${topic.anchor}`}>\n                      <Button variant={\"outlined\"} color={'primary'} className={classes.topLink}>\n                        {topic.title}\n                      </Button>\n                    </Link>\n                  </Grid>))}\n              </Grid>\n            </div>\n            <div className={classes.globalFilter}>\n              <Typography className={classes.filterLabel}>\n                Topic Filters\n              </Typography>\n              <div className={classes.chips}>\n                <Grid className={classes.navigationGrid} container spacing={3}>              {\n                  allChips.map(chip =>\n                  activeChips.indexOf(chip) > -1 ?\n                    (<Chip\n                      key={`${chip}-all`}\n                      icon={<FilterListIcon/>}\n                      label={chip}\n                      color={'secondary'}\n                      onDelete={() => {\n                        setActiveChips(activeChips.filter(activeChip => activeChip !== chip))\n                      }}\n                      className={classes.chip}/>)\n                    : (<Chip\n                      icon={<FilterListIcon/>}\n                      key={chip}\n                      label={chip}\n                      color={'primary'}\n                      clickable onClick={() => {\n                      setActiveChips([\n                        ...activeChips,\n                        chip\n                      ]);\n                    }} className={classes.chip}/>))}\n                </Grid>\n              </div>\n            </div>\n          </div>\n          {\n            filteredTopics.map(topic => (\n              <ScrollableAnchor key={topic.anchor} id={topic.anchor}>\n                <div className={classes.topic}>\n                  <Typography variant={'h5'} className={classes.excerpt}>\n                    {topic.title}\n                  </Typography>\n                  <iframe src={`https://player.vimeo.com/video/${topic.videoLink}`}\n                          title={topic.videoLink}\n                          width=\"800\"\n                          height=\"500\" frameBorder=\"0\"\n                          allow=\"autoplay; fullscreen\" allowFullScreen/>\n                  <div className={classes.chips}>\n                    {topic.chips.map(chip =>\n                      activeChips.indexOf(chip) > -1 ?\n                        (<Chip\n                          key={chip}\n                          icon={<FilterListIcon/>}\n                          label={chip}\n                          color={'secondary'}\n                          onDelete={() => {\n                            setActiveChips(activeChips.filter(activeChip => activeChip !== chip))\n                          }}\n                          className={classes.chip}/>)\n                        : (<Chip\n                          icon={<FilterListIcon/>}\n                          key={chip}\n                          label={chip}\n                          color={'primary'}\n                          clickable onClick={() => {\n                          setActiveChips([\n                            ...activeChips,\n                            chip\n                          ]);\n                        }} className={classes.chip}/>))}\n                  </div>\n                  <ExpansionPanel className={classes.expansionPanel}>\n                    <ExpansionPanelSummary\n                      expandIcon={<ExpandMoreIcon/>}\n                      aria-controls=\"panel1a-content\"\n                      id=\"panel1a-header\"\n                    >\n                      <Typography>{topic.title}: Transcript</Typography>\n                    </ExpansionPanelSummary>\n                    <ExpansionPanelDetails>\n                      <div style={{display: 'flex-column'}}>\n                        <div>\n                          {topic.descriptionComponent}\n                        </div>\n                        <ul>\n                          {topic.transcriptionComponents(classes).map(transcriptionTimeMarker => (\n                            <li>\n                              {transcriptionTimeMarker}\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    </ExpansionPanelDetails>\n                  </ExpansionPanel>\n                </div>\n              </ScrollableAnchor>\n            ))\n          }\n          <ScrollableAnchor id={'Links'}>\n            <div className={classes.honorableMentions}>\n              <Typography variant={\"h4\"} align={'center'}>\n                Honorable Mentions and Detailed References\n              </Typography>\n              <div className={classes.documentation}>\n                <Typography>Documentation</Typography>\n                <List>\n                  <ListItem><Link color={'secondary'} target={'_blank'}\n                                  href={'https://www.jetbrains.com/help/idea/pro-tips.html#Pro_Tips.xml'}>Top Tips from\n                    the JetBrains Folks.</Link></ListItem>\n                  <ListItem><Link color={'secondary'} target={'_blank'}\n                                  href={'https://www.jetbrains.com/help/idea/configuring-javascript-libraries.html#Configuring_JavaScript_Libraries.xml'}>Configure\n                    Javascript libraries (Jest Integration)</Link></ListItem>\n                  <ListItem><Link color={'secondary'} target={'_blank'}\n                                  href={'https://www.jetbrains.com/help/idea/react.html#react_code_completion'}>React JS\n                    Integration</Link></ListItem>\n                  <ListItem><Link color={'secondary'} target={'_blank'}\n                                  href={'https://www.jetbrains.com/help/idea/tutorial-finding-and-replacing-text-using-regular-expressions.html#capture_groups_and_backreference'}>Dynamic\n                    RegEx Find/Replace</Link></ListItem>\n                  <ListItem><Link color={'secondary'} target={'_blank'}\n                                  href={'https://www.jetbrains.com/help/idea/resolve-conflicts.html?section=Windows%20or%20Linux#Resolve_conflicts.xml'}>Resolving\n                    Git Conflicts.</Link></ListItem>\n                  <ListItem><Link color={'secondary'} target={'_blank'}\n                                  href={'https://www.jetbrains.com/help/idea/markdown.html#preview'}>Markdown\n                    Integration.</Link></ListItem>\n                  <ListItem><Link color={'secondary'} target={'_blank'}\n                                  href={'https://www.jetbrains.com/help/idea/running-unit-tests-on-jest.html#ws_jest_running_tests'}>Running/Debugging\n                    Jest Unit Tests in your IDE.</Link></ListItem>\n                  <ListItem><Link color={'secondary'} target={'_blank'}\n                                  href={'https://www.jetbrains.com/help/idea/specific-javascript-refactorings.html'}>Javascript\n                    Refactoring Tools</Link></ListItem>\n                  <ListItem><Link color={'secondary'} target={'_blank'}\n                                  href={'https://www.jetbrains.com/help/idea/working-with-source-code.html#editor_lines_code_blocks'}>Lines\n                    of Code Manipulation</Link></ListItem>\n                  <ListItem><Link color={'secondary'} target={'_blank'}\n                                  href={'https://www.jetbrains.com/help/idea/auto-completing-code.html#smart_completion'}>Cool\n                    things your Autocomplete can do.</Link></ListItem>\n                  <ListItem><Link color={'secondary'} target={'_blank'}\n                                  href={'https://www.jetbrains.com/help/idea/converting-a-java-file-to-kotlin-file.html#Converting_a_Java_File_to_Kotlin_File.xml'}>Java\n                    to Kotlin Documentation</Link></ListItem>\n                  <ListItem><Link color={'secondary'} target={'_blank'}\n                                  href={'https://www.jetbrains.com/help/idea/comparing-files-and-folders.html#comparing_folders'}>Directory\n                    Difference Tool</Link></ListItem>\n                  <ListItem><Link color={'secondary'} target={'_blank'}\n                                  href={'https://www.jetbrains.com/help/idea/running-and-debugging-node-js.html#Running_and_Debugging_Node_JS.xml'}>Debugging\n                    your Node applications in your IDE</Link></ListItem>\n                  <ListItem><Link color={'secondary'} target={'_blank'}\n                                  href={'https://www.jetbrains.com/help/idea/using-language-injections.html#use-language-injection-comments'}>Easily\n                    create JSON in Java Strings.</Link></ListItem>\n                  <ListItem><Link color={'secondary'} target={'_blank'}\n                                  href={'https://www.jetbrains.com/help/idea/surrounding-blocks-of-code-with-language-constructs.html'}>Surround\n                    your code with stuff!</Link></ListItem>\n                  <ListItem><Link color={'secondary'} target={'_blank'}\n                                  href={'https://www.jetbrains.com/help/idea/debugging-javascript-in-chrome.html'}>Javascript\n                    Debugging in your IDE.</Link></ListItem>\n                </List>\n              </div>\n              <div>\n                <Typography>\n                  Handy Videos\n                </Typography>\n                <List>\n                  <ListItem><Link color={\"secondary\"} target={'_blank'}\n                                  href={'https://www.youtube.com/watch?v=eq3KiAH4IBI'}>42 Intellij Tips\n                    and Tricks</Link></ListItem>\n                  <ListItem><Link color={'secondary'} target={'_blank'}\n                                  href={'https://javaspecialists.teachable.com/p/intellij-wizardry'}>Intellij\n                    Wizardry <span role={'img'} aria-label={'wizard'}>🧙</span> (Requires Sign-Up, but\n                    free)</Link></ListItem>\n                </List>\n              </div>\n            </div>\n          </ScrollableAnchor>\n          <div style={{\n            padding: '5em'\n          }}></div>\n        </div>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {ThemeProvider} from \"@material-ui/styles\";\nimport {createMuiTheme} from \"@material-ui/core\";\nimport {blue, green, grey, red} from \"@material-ui/core/colors\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: grey,\n    secondary: red,\n  }\n});\n\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <App />\n  </ThemeProvider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}